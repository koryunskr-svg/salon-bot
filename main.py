main.py

# main.py
import logging
import logging.handlers
import os
from datetime import datetime, timedelta
import time
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    PicklePersistence,
)

from config import TELEGRAM_TOKEN, TIMEZONE, RESERVATION_TIMEOUT, WARNING_TIMEOUT, SHEET_ID, CALENDAR_ID
from utils.safe_google import (
    safe_get_sheet_data as get_sheet_data,
    safe_append_to_sheet as append_to_sheet,
    safe_update_sheet_row as update_sheet_row,
    safe_get_calendar_events as get_calendar_events,
    safe_create_calendar_event as create_calendar_event,
    safe_update_calendar_event as update_calendar_event,
    safe_delete_calendar_event as delete_calendar_event,
)
from utils.slots import generate_slots_for_10_days, find_available_slots
from utils.reminders import send_reminders
from utils.admin import load_admins, notify_admins

# =============== –ü–†–û–î–ê–ö–®–ï–ù-–õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===============
def setup_production_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s - [%(filename)s:%(lineno)d]'
    )
    
    file_handler = logging.handlers.RotatingFileHandler(
        'bot_production.log',
        maxBytes=10*1024*1024,
        backupCount=5
    )
    file_handler.setFormatter(formatter)
    
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

def log_business_event(event_type, **kwargs):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-—Å–æ–±—ã—Ç–∏–π"""
    logging.info(f"BUSINESS_EVENT: {event_type} - {kwargs}")

# =============== –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ===============
async def global_error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logging.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception:
        pass
    
    await notify_admins(context, f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}")

# =============== –ê–í–¢–û–û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –°–ï–°–°–ò–ô ===============
async def update_last_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    context.user_data["_last_activity"] = time.time()

async def global_activity_updater(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await update_last_activity(update, context)

async def cleanup_old_sessions_job(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ–ª–µ–µ 30 –¥–Ω–µ–π"""
    now = time.time()
    max_age = 30 * 24 * 60 * 60
    to_remove = [
        user_id for user_id, data in context.application.user_data.items()
        if now - data.get("_last_activity", now) > max_age
    ]
    for user_id in to_remove:
        del context.application.user_data[user_id]
    if to_remove:
        logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ {len(to_remove)} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π")

# =============== –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò ===============
def validate_configuration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    required_config = {
        "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
        "SHEET_ID": SHEET_ID, 
        "CALENDAR_ID": CALENDAR_ID,
        "TIMEZONE": TIMEZONE
    }
    
    missing = [key for key, value in required_config.items() if not value]
    if missing:
        logging.critical(f"‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ config.py: {', '.join(missing)}")
        return False
    
    if not all([RESERVATION_TIMEOUT, WARNING_TIMEOUT]):
        logging.critical("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã —Ç–∞–π–º–∞—É—Ç—ã —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
        
    logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    return True

# =============== –ó–ê–©–ò–¢–ê –û–¢ –ü–û–í–¢–û–†–ù–û–ì–û –ó–ê–ü–£–°–ö–ê ===============
def create_lock_file():
    """–°–æ–∑–¥–∞–µ—Ç lock-—Ñ–∞–π–ª –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    lock_file = "bot.lock"
    if os.path.exists(lock_file):
        logging.critical("‚ùå –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω! –§–∞–π–ª bot.lock —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return False
    
    try:
        with open(lock_file, 'w') as f:
            f.write(str(os.getpid()))
        return True
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å lock-—Ñ–∞–π–ª: {e}")
        return False

def remove_lock_file():
    """–£–¥–∞–ª—è–µ—Ç lock-—Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    try:
        if os.path.exists("bot.lock"):
            os.remove("bot.lock")
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å lock-—Ñ–∞–π–ª: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MENU,
    SELECT_SERVICE_TYPE,
    SELECT_SUBSERVICE,
    SHOW_PRICE_INFO,
    SELECT_PRIORITY,
    SELECT_DATE,
    SELECT_MASTER,
    SELECT_TIME,
    ENTER_NAME,
    ENTER_PHONE,
    CONFIRM_RESERVATION,
    MODIFY_RESERVATION,
    WAITING_LIST_NAME,
    WAITING_LIST_PHONE,
    CALLBACK_NAME,
    CALLBACK_PHONE,
    ADMIN_RECORD_START,
) = range(17)

def format_duration(minutes):
    hours = minutes // 60
    mins = minutes % 60
    if hours == 0:
        return f"{mins} –º–∏–Ω"
    elif mins == 0:
        return f"{hours} —á"
    else:
        return f"{hours} —á {mins} –º–∏–Ω"

# --- START ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update_last_activity(update, context)
    log_business_event("user_started", user_id=update.effective_user.id)
    
    context.user_data["state"] = MENU

    if context.args and context.args[0].startswith("bind_"):
        record_id = context.args[0].split("bind_")[1]
        records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
        for idx, row in enumerate(records, start=2):
            if len(row) > 0 and row[0] == record_id:
                row_to_write = row[:13] + [str(update.effective_chat.id)] + row[14:]
                update_sheet_row(SHEET_ID, "–ó–∞–ø–∏—Å–∏", idx, row_to_write)
                await update.message.reply_text("‚úÖ –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∑–∞–ø–∏—Å–∏. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
                return

    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ "–°–∞–ª–æ–Ω"
    all_schedule = get_sheet_data(SHEET_ID, "–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤!A2:F")
    schedule_text = "10:00‚Äì20:00"
    for row in all_schedule:
        if len(row) >= 4 and row[0] == "–°–∞–ª–æ–Ω":
            try:
                days = row[1]
                start_time = row[2]
                end_time = row[3]
                schedule_text = f"{days}: {start_time}‚Äì{end_time}"
                break
            except Exception:
                pass

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="book")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="modify")],
        [InlineKeyboardButton("üíÖ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="prices")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n{schedule_text}",
        reply_markup=reply_markup
    )
    return MENU

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await update_last_activity(update, context)
    
    data = query.data

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ù–∞–∑–∞–¥" —Å —É—á—ë—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
if data == "back":
    current_state = context.user_data.get("state")
    if current_state == SELECT_SUBSERVICE:
        return await select_service_type(update, context)
    elif current_state == SHOW_PRICE_INFO:
        service_type = context.user_data.get("service_type")
        if service_type:
            context.user_data["state"] = SELECT_SERVICE_TYPE
            subservices = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:B")
            options = [row[1] for row in subservices if row and len(row) > 1 and row[0] == service_type]
            keyboard = [[InlineKeyboardButton(opt, callback_data=f"subservice_{opt}")] for opt in options]
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({service_type}):", reply_markup=reply_markup)
            return SELECT_SUBSERVICE
    elif current_state in (SELECT_PRIORITY, SELECT_DATE, SELECT_MASTER, SELECT_TIME):
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏
        return await show_price_info(update, context)
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)
    return MENU

 # –û—Å—Ç–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if data == "book":
        return await select_service_type(update, context)
    elif data == "modify":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        context.user_data["state"] = MODIFY_RESERVATION
        return MODIFY_RESERVATION
    elif data == "prices":
        return await show_prices(update, context)
    elif data == "contact_admin":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        context.user_data["state"] = MENU
        return MENU

    if data.startswith("service_"):
        return await select_subservice(update, context)
    if data.startswith("subservice_"):
        return await show_price_info(update, context)
    if data.startswith("priority_"):
        return await select_priority(update, context)
    if data.startswith("date_"):
        return await select_master(update, context)
    if data.startswith("master_"):
        return await select_time(update, context)
    if data.startswith("slot_"):
        return await reserve_slot(update, context)

    if data.startswith("confirm_reminder_"):
        record_id = data.split("confirm_reminder_")[1]
        await handle_confirm_reminder(record_id, query, context)
        return
    if data.startswith("cancel_reminder_"):
        record_id = data.split("cancel_reminder_")[1]
        await handle_cancel_reminder(record_id, query, context)
        return

    if data == "confirm":
        return await confirm_booking(update, context)
    if data == "cancel_reserve":
        return await cancel_reservation(update, context)
    if data == "waiting_list":
        await query.edit_message_text("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è.")
        return MENU

    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# --- –ü–û–ö–ê–ó –¶–ï–ù ---
async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    prices_text = "üíÖ –ú–ê–ù–ò–ö–Æ–†–ù–´–ï\n"
    in_manicure = True

    for row in services:
        if len(row) < 5:
            continue

        category, subservice, duration, buffer, price = row[0], row[1], int(row[2]), int(row[3]), row[4]
        duration_min = duration + buffer
        formatted_duration = format_duration(duration_min)
        price_str = f"{int(float(price))} ‚ÇΩ" if price.replace('.', '').isdigit() else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if category == "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ" and in_manicure:
            prices_text += "\n‚úÇÔ∏è –ü–ê–†–ò–ö–ú–ê–•–ï–†–°–ö–ò–ï\n"
            in_manicure = False

        prices_text += f"‚Ä¢ {subservice} ‚Äî {price_str} ({formatted_duration})\n"

    await query.edit_message_text(prices_text, reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
    ]))

# --- –í–´–ë–û–† –¢–ò–ü–ê –£–°–õ–£–ì–ò ---
async def select_service_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:A")
    service_types = list(set(row[0] for row in services if row))

    keyboard = [[InlineKeyboardButton(st, callback_data=f"service_{st}")] for st in service_types]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=reply_markup)
    context.user_data["state"] = SELECT_SERVICE_TYPE
    return SELECT_SERVICE_TYPE

# --- –í–´–ë–û–† –ü–û–î–£–°–õ–£–ì–ò ---
async def select_subservice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service_type = query.data.split("_", 1)[1]

    subservices = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:B")
    options = [row[1] for row in subservices if row and len(row) > 1 and row[0] == service_type]

    keyboard = [[InlineKeyboardButton(opt, callback_data=f"subservice_{opt}")] for opt in options]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({service_type}):", reply_markup=reply_markup)
    context.user_data["service_type"] = service_type
    context.user_data["subservice"] = None
    context.user_data["state"] = SELECT_SUBSERVICE
    return SELECT_SUBSERVICE

# --- –ü–û–ö–ê–ó –¶–ï–ù–´ –ò –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò ---
async def show_price_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    subservice = query.data.split("_", 1)[1]
    context.user_data["subservice"] = subservice

    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    duration, buffer, price = 60, 0, "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    for row in services:
        if len(row) > 1 and row[1] == subservice:
            duration = int(row[2])
            buffer = int(row[3])
            price = row[4]
            break

    total_duration = duration + buffer
    formatted_duration = format_duration(total_duration)
    price_str = f"{int(float(price))} ‚ÇΩ" if price.replace('.', '').isdigit() else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    text = (
        f"‚úÖ –£—Å–ª—É–≥–∞: {subservice}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatted_duration}\n\n"
        "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ?"
    )

    keyboard = [
        [InlineKeyboardButton("üìÖ –°–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞", callback_data="priority_date")],
        [InlineKeyboardButton("üë©‚Äçü¶∞ –°–Ω–∞—á–∞–ª–∞ –º–∞—Å—Ç–µ—Ä", callback_data="priority_master")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back)],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)
    context.user_data["state"] = SELECT_PRIORITY
    return SELECT_PRIORITY

# --- –î–ê–¢–ê –∏–ª–∏ –ú–ê–°–¢–ï–†? ---
async def select_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    priority = query.data.split("_")[1]
    context.user_data["priority"] = priority

    available_dates = find_available_slots(
        service_type=context.user_data["service_type"],
        subservice=context.user_data["subservice"],
        priority=priority
    )
    dates = sorted(list(set(d["date"] for d in available_dates)))

    keyboard = [[InlineKeyboardButton(d, callback_data=f"date_{d}")] for d in dates]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)
    context.user_data["state"] = SELECT_DATE
    return SELECT_DATE

# --- –í–´–ë–û–† –ú–ê–°–¢–ï–†–ê ---
async def select_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    date_str = query.data.split("_", 1)[1]
    context.user_data["date"] = date_str

    # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: —á–∏—Ç–∞–µ–º A2:F, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞—Ñ–∏–∫
    from datetime import datetime as dt_mod
    try:
        target_date = dt_mod.strptime(date_str, "%d.%m.%Y")
        day_name = target_date.strftime("%a")
        short_day = {"Mon": "–ü–Ω", "Tue": "–í—Ç", "Wed": "–°—Ä", "Thu": "–ß—Ç", "Fri": "–ü—Ç", "Sat": "–°–±", "Sun": "–í—Å"}.get(day_name)
    except Exception:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.")
        return

    masters = get_sheet_data(SHEET_ID, "–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤!A2:F")
    available_masters = []

    for row in masters:
        if len(row) < 2:
            continue
        master_name = row[0]
        if master_name == "–°–∞–ª–æ–Ω":
            continue
        work_days = row[1].split(", ") if len(row) > 1 else []
        if short_day not in work_days:
            continue
        if len(row) > 5 and row[5].strip():
            blacklisted_dates = [d.strip() for d in row[5].split(",")]
            if date_str in blacklisted_dates:
                continue
        available_masters.append(master_name)

    if not available_masters:
        await query.edit_message_text(f"‚ùå –ù–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –Ω–∞ {date_str} ({short_day}).\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: {[row[1] for row in masters if len(row)>1 and row[0]!='–°–∞–ª–æ–Ω']}")
        return

    keyboard = [[InlineKeyboardButton(m, callback_data=f"master_{m}")] for m in available_masters]
    keyboard.append([InlineKeyboardButton("üë§ –õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä", callback_data="master_any")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=reply_markup)
    context.user_data["state"] = SELECT_MASTER
    return SELECT_MASTER

# --- –í–´–ë–û–† –í–†–ï–ú–ï–ù–ò ---
async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    master_key = query.data.split("_", 1)[1]

    date_str = context.user_data["date"]
    service_type = context.user_data["service_type"]
    subservice = context.user_data["subservice"]

    slots = find_available_slots(
        service_type=service_type,
        subservice=subservice,
        date=date_str,
        selected_master=master_key if master_key != "any" else None
    )

    if not slots:
        keyboard = [[InlineKeyboardButton("–í –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è", callback_data="waiting_list")]]
        await query.edit_message_text("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç. –•–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞—Ç—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    keyboard = []
    for slot in slots:
        time_str = slot["time"]
        master = slot["master"]
        callback_data = f"slot_{master}_{time_str}"
        keyboard.append([InlineKeyboardButton(f"{time_str} ‚Äî {master}", callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    context.user_data["state"] = SELECT_TIME
    return SELECT_TIME

# --- –†–ï–ó–ï–†–í –°–õ–û–¢–ê ---
async def reserve_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split("_", 2)
    master = data[1]
    time_str = data[2]

    date_str = context.user_data["date"]
    
    # üîÑ –ü–û–í–¢–û–†–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –Ω–µ –∑–∞–Ω—è–ª–∏ –ª–∏ —Å–ª–æ—Ç –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—É–º–∞–ª?
    slots = find_available_slots(
        service_type=context.user_data["service_type"],
        subservice=context.user_data["subservice"],
        date=date_str,
        priority=context.user_data.get("priority", "date")
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    slot_still_available = False
    for slot in slots:
        if (slot["time"] == time_str and 
            (master == "any" or slot["master"] == master)):
            slot_still_available = True
            break
    
    if not slot_still_available:
        await query.edit_message_text(
            "‚ùå –≠—Ç–æ—Ç —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏", 
                                    callback_data=f"date_{date_str}")]
            ])
        )
        return SELECT_DATE

    dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    start_dt = TIMEZONE.localize(dt)

    subservice = context.user_data["subservice"]
    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    duration = 60
    for row in services:
        if len(row) > 1 and row[1] == subservice:
            duration = int(row[2]) + int(row[3])
            break
    end_dt = start_dt + timedelta(minutes=duration)

    event_id = create_calendar_event(
        calendar_id=CALENDAR_ID,
        summary="‚è≥ –ë—Ä–æ–Ω—å (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)",
        start_time=start_dt.isoformat(),
        end_time=end_dt.isoformat(),
        color_id="5",
        description=f"–ë—Ä–æ–Ω—å: {subservice} –∫ {master}. –í –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è..."
    )

    context.user_data["temp_booking"] = {
        "master": master,
        "time": time_str,
        "date": date_str,
        "event_id": event_id,
        "start_dt": start_dt,
        "end_dt": end_dt,
        "duration": duration,
        "subservice": subservice
    }

    context.job_queue.run_once(
        release_reservation,
        RESERVATION_TIMEOUT,
        chat_id=update.effective_chat.id,
        user_id=update.effective_user.id,

        name=f"reservation_timeout_{update.effective_chat.id}"
    )
    context.job_queue.run_once(
        warn_reservation,
        WARNING_TIMEOUT,
        chat_id=update.effective_chat.id,
        user_id=update.effective_user.id,
        name=f"reservation_warn_{update.effective_chat.id}"
    )

    await query.edit_message_text("–°–ª–æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    context.user_data["state"] = ENTER_NAME
    return ENTER_NAME

async def warn_reservation(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    await context.bot.send_message(chat_id, "‚è≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")

async def release_reservation(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    temp_booking = context.user_data.get("temp_booking")
    if temp_booking and temp_booking.get("event_id"):
        try:
            delete_calendar_event(CALENDAR_ID, temp_booking["event_id"])
        except Exception:
            pass
        await context.bot.send_message(job.chat_id,
  "–°–ª–æ—Ç –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
    context.user_data.clear()

# --- –í–í–û–î –ò–ú–ï–ù–ò ---
async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update_last_activity(update, context)
    
    if context.user_data.get("state") != ENTER_NAME:
        return
    
    name = update.message.text.strip()
    
    # –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–ú–ï–ù–ò
    def validate_name(name_str):
        if len(name_str) < 2 or len(name_str) > 50:
            return False
        clean_name = name_str.replace(' ', '').replace('-', '')
        return clean_name.isalpha()
    
    if not validate_name(name):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –¥–ª–∏–Ω–∞ 2-50 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return ENTER_NAME
    
    context.user_data["name"] = name
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=ReplyKeyboardRemove())
    context.user_data["state"] = ENTER_PHONE
    return ENTER_PHONE

# --- –í–í–û–î –¢–ï–õ–ï–§–û–ù–ê ---
async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update_last_activity(update, context)
    
    if context.user_data.get("state") != ENTER_PHONE:
        return

    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()

    # –í–ê–õ–ò–î–ê–¶–ò–Ø –ù–û–ú–ï–†–ê –¢–ï–õ–ï–§–û–ù–ê
    def validate_phone(phone_str):
        clean_phone = ''.join(filter(str.isdigit, phone_str))
        return 10 <= len(clean_phone) <= 15
    
    if not validate_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7...) "
            "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'"
        )
        return ENTER_PHONE

    context.user_data["phone"] = phone

    records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
    for row in records:
        if len(row) > 13 and row[13] == str(update.effective_chat.id) and row[8] == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ":
            try:
                start_time = datetime.strptime(f"{row[6]} {row[7]}", "%d.%m.%Y %H:%M")
                start_time = TIMEZONE.localize(start_time)
                end_time = start_time + timedelta(minutes=60)
                new_start = context.user_data["temp_booking"]["start_dt"]
                if not (new_start >= end_time or new_start + timedelta(minutes=60) <= start_time):
                    await update.message.reply_text(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {row[6]} –≤ {row[7]} –∫ {row[5]}. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.")
                    return
            except Exception:
                continue

    for row in records:
        if len(row) > 4 and row[1] == context.user_data["name"] and row[8] == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" and row[4] == context.user_data["service_type"]:
            await update.message.reply_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {row[4]} {row[6]} –≤ {row[7]} –∫ {row[5]}.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É", callback_data="confirm_repeat")],
                    [InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_reserve")]
                ])
            )
            return

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reserve")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n"
        f"–£—Å–ª—É–≥–∞: {context.user_data['subservice']}\n"
        f"–ú–∞—Å—Ç–µ—Ä: {context.user_data['temp_booking']['master']}\n"
        f"–î–∞—Ç–∞: {context.user_data['date']}, –í—Ä–µ–º—è: {context.user_data['temp_booking']['time']}\n"
        f"–ò–º—è: {context.user_data['name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        reply_markup=reply_markup
    )
    context.user_data["state"] = CONFIRM_RESERVATION
    return ENTER_PHONE

# --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ü–ò–°–ò ---
async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    temp_booking = context.user_data.get("temp_booking")
    if not temp_booking:
        await query.edit_message_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.")
        return

    update_calendar_event(
        calendar_id=CALENDAR_ID,
        event_id=temp_booking["event_id"],
        summary="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        color_id="7",
        description=f"–ö–ª–∏–µ–Ω—Ç: {context.user_data['name']}, —Ç–µ–ª.: {context.user_data['phone']}"
    )

    records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A:A")
    record_id = f"–ó–ê–ü-{len(records):03d}"

    append_to_sheet(SHEET_ID, "–ó–∞–ø–∏—Å–∏", [
        record_id,
        context.user_data["name"],
        context.user_data["phone"],
        context.user_data["service_type"],
        context.user_data["subservice"],
        temp_booking["master"],
        temp_booking["date"],
        temp_booking["time"],
        "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M"),
        "", "‚ùå", "‚ùå",
        str(update.effective_chat.id),
        temp_booking["event_id"]
    ])

    link = f"t.me/@salon_bot?start=bind_{record_id}"
    await query.edit_message_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {context.user_data['subservice']} {temp_booking['date']} –≤ {temp_booking['time']}.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ: {link}")
    
    log_business_event("booking_confirmed", 
                      user_id=update.effective_user.id,
                      service=context.user_data.get("subservice"),
                      master=context.user_data.get("temp_booking", {}).get("master"))
    
    await notify_admins(context, f"üì¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {context.user_data['subservice']} –∫ {temp_booking['master']} {temp_booking['date']} –≤ {temp_booking['time']} ‚Äî {context.user_data['name']}, {context.user_data['phone']}")

    context.user_data.clear()

# --- –û–¢–ú–ï–ù–ê –†–ï–ó–ï–†–í–ê ---
async def cancel_reservation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    temp_booking = context.user_data.get("temp_booking")
    if temp_booking and temp_booking.get("event_id"):
        try:
            delete_calendar_event(CALENDAR_ID, temp_booking["event_id"])
        except Exception:
            pass
    await query.edit_message_text("–†–µ–∑–µ—Ä–≤ –æ—Ç–º–µ–Ω—ë–Ω. –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω.")
    context.user_data.clear()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
async def handle_confirm_reminder(record_id: str, query, context):
    try:
        records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
        for idx, row in enumerate(records, start=2):
            if len(row) > 0 and row[0] == record_id:
                if len(row) < 12:
                    row.extend([""] * (12 - len(row)))
                row[11] = "‚úÖ"
                update_sheet_row(SHEET_ID, "–ó–∞–ø–∏—Å–∏", idx, row)
                await query.edit_message_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
                return
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %s", e)
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

async def handle_cancel_reminder(record_id: str, query, context):
    try:
        records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
        for idx, row in enumerate(records, start=2):
            if len(row) > 0 and row[0] == record_id:
                if len(row) < 9:
                    row.extend([""] * (9 - len(row)))
                row[8] = "–æ—Ç–º–µ–Ω–µ–Ω–æ"
                event_id = row[14] if len(row) > 14 else None
                update_sheet_row(SHEET_ID, "–ó–∞–ø–∏—Å–∏", idx, row)
                if event_id:
                    try:
                        delete_calendar_event(CALENDAR_ID, event_id)
                    except Exception:
                        pass
                await query.edit_message_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏.")
                await notify_admins(context, f"‚ùó –ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å {record_id}.")
                return
        await query.edit_message_text("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: %s", e)
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã.")
# ============================================
# üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô  –ü–ê–¢–ß  
# ============================================

import time
from datetime import datetime, time as datetime_time

from config import SHEET_ID
from utils.safe_google import safe_append_to_sheet as append_to_sheet

from utils.admin import load_admins, notify_admins
WORK_HOURS = (datetime_time(9, 0), datetime_time(21, 0))
TRIGGER_WORDS = ["–∞–¥–º–∏–Ω", "—Å–≤—è–∑–∞—Ç—å—Å—è", "–ø–æ–º–æ—â—å", "—á–µ–ª–æ–≤–µ–∫", "–º–µ–Ω–µ–¥–∂–µ—Ä"]

# üîπ 1. –¢—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
async def handle_trigger_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    if context.user_data.get("state") not in [0, None]:
        return

    text = update.message.text.lower()
    for trigger in TRIGGER_WORDS:
        if trigger in text:
            user = update.effective_user
            now = datetime.now().time()

            try:
                if WORK_HOURS[0] <= now <= WORK_HOURS[1]:
                    await notify_admins(context, f"üìû {user.first_name}: {update.message.text}")
                    await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏")
                else:
                    append_to_sheet(SHEET_ID, "–û–±—Ä–∞—Ç–Ω—ã–µ –∑–≤–æ–Ω–∫–∏", [
                        f"CALL-{int(time.time())}", datetime.now().strftime("%d.%m.%Y %H:%M"),
                        user.first_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ", "", "Telegram", "", "–æ–∂–∏–¥–∞–µ—Ç"
                    ])
                    await update.message.reply_text("‚è∞ –ú—ã –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º. –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
            except Exception:
                await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.")
            break  # üü¢ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤–∞—Ö –ø–æ–¥—Ä—è–¥

# üîπ 2. –ö–æ–º–∞–Ω–¥–∞ /record
async def handle_record_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        admins = load_admins() or []
        user_id = str(update.effective_user.id)
        is_admin = any(admin and admin.get('chat_id') == user_id for admin in admins)

        if not is_admin:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
            return

        context.user_data.clear()
        await update.message.reply_text(
            "üë®‚Äçüíº –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ –æ—Ç –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="book")]
            ])
        )
    except Exception:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞")

# üîπ 3. –õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è
async def handle_waiting_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "waiting_list":
        try:
            user_data = context.user_data
            append_to_sheet(SHEET_ID, "–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è", [
                "1", f"WAIT-{int(time.time())}", user_data.get("name", ""),
                user_data.get("phone", ""), user_data.get("service_type", ""),
                user_data.get("subservice", ""), "–æ–∂–∏–¥–∞–µ—Ç",
                datetime.now().strftime("%d.%m.%Y %H:%M")
            ])
            await query.edit_message_text("üìã –í—ã –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è")
        except Exception:
            await query.edit_message_text("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")

# üîπ 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
def register_handlers_directly(application):
    """–í–´–ó–í–ê–¢–¨ –≠–¢–£ –§–£–ù–ö–¶–ò–Æ –ò–ó main() –ü–û–°–õ–ï –°–û–ó–î–ê–ù–ò–Ø application"""
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trigger_words), group=99)
    application.add_handler(CommandHandler("record", handle_record_command))
    application.add_handler(CallbackQueryHandler(handle_waiting_list, pattern="^waiting_list$"), group=1)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    if not create_lock_file():
        return

    # === –î–æ–±–∞–≤–ª–µ–Ω–æ: –ø–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (SIGTERM/SIGINT) –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è lock-—Ñ–∞–π–ª–∞ ===
    import signal
    import sys

    def _handle_exit(signum, frame):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        try:
            remove_lock_file()
        except Exception:
            pass
        sys.exit(0)

    try:
        signal.signal(signal.SIGTERM, _handle_exit)
        signal.signal(signal.SIGINT, _handle_exit)
    except Exception as _err:
        logging.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å signal handlers: {_err}")
    # ==============================================================================================

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_production_logging()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not validate_configuration():
        remove_lock_file()
        return
    
    try:
        load_admins()
        log_business_event("bot_started")
        logging.info("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logging.exception("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: %s", e)
        remove_lock_file()
        return

    persistence = PicklePersistence(filepath="bot_data.pickle")
    
    try:
        application = Application.builder()\
            .token(TELEGRAM_TOKEN)\
            .persistence(persistence)\
            .build()
    except Exception as e:
        logging.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
        remove_lock_file()
        return

    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    application.add_error_handler(global_error_handler)
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–Ω–∞ –õ–Æ–ë–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ) - –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, global_activity_updater), group=-1)

    # –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00
    application.job_queue.run_daily(
        cleanup_old_sessions_job,
        time=datetime.strptime("03:00", "%H:%M").time()
    )
    
    application.job_queue.run_daily(
        generate_slots_for_10_days,
        time=datetime.strptime("00:00", "%H:%M").time(),
        days=(0, 1, 2, 3, 4, 5, 6)
    )
    application.job_queue.run_repeating(send_reminders, interval=60, first=10)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name), group=1)
    application.add_handler(MessageHandler(filters.CONTACT, enter_phone), group=1)

 # üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ ‚Äî –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω—ã—Ö
    register_handlers_directly(application)

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Ä–µ–∂–∏–º–µ")
    
    try:
        application.run_polling()
    except Exception as e:
        logging.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        remove_lock_file()


if __name__ == "__main__":
    main()


