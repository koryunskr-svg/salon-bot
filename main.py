import logging
import os
import time  # <-- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

from config import TELEGRAM_TOKEN, TIMEZONE, RESERVATION_TIMEOUT, WARNING_TIMEOUT
from utils.google import (
    get_sheet_data,
    append_to_sheet,
    update_sheet_row,
    get_calendar_events,
    create_calendar_event,
    update_calendar_event,
    delete_calendar_event,
)
from utils.slots import generate_slots_for_10_days, find_available_slots
from utils.reminders import send_reminders
from utils.admin import load_admins, notify_admins

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    MENU,
    SELECT_SERVICE_TYPE,
    SELECT_SUBSERVICE,
    SHOW_PRICE_INFO,
    SELECT_PRIORITY,
    SELECT_DATE,
    SELECT_MASTER,
    SELECT_TIME,
    ENTER_NAME,
    ENTER_PHONE,
    CONFIRM_RESERVATION,
    MODIFY_RESERVATION,
    WAITING_LIST_NAME,
    WAITING_LIST_PHONE,
    CALLBACK_NAME,
    CALLBACK_PHONE,
    ADMIN_RECORD_START,
) = range(17)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
user_data = {}
user_last_msg = {}  # <-- –î–û–ë–ê–í–õ–ï–ù–û: –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–ø–∞–º–∞

def format_duration(minutes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç: 90 ‚Üí '1 —á 30 –º–∏–Ω'"""
    hours = minutes // 60
    mins = minutes % 60
    if hours == 0:
        return f"{mins} –º–∏–Ω"
    elif mins == 0:
        return f"{hours} —á"
    else:
        return f"{hours} —á {mins} –º–∏–Ω"

# --- START ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    user_data[chat_id] = {"state": MENU}

    # –ü—Ä–∏–≤—è–∑–∫–∞ chat_id —á–µ—Ä–µ–∑ start=bind_...
    if context.args and context.args[0].startswith("bind_"):
        record_id = context.args[0].split("bind_")[1]
        records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
        for row in records:
            if len(row) > 13 and row[0] == record_id:
                row_index = int(record_id.split("-")[1]) + 1
                update_sheet_row(SHEET_ID, "–ó–∞–ø–∏—Å–∏", row_index, row[:13] + [str(chat_id)] + row[14:])
                await update.message.reply_text("‚úÖ –í—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∑–∞–ø–∏—Å–∏. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞.")
                return

    # –ì—Ä–∞—Ñ–∏–∫ —Å–∞–ª–æ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    salon_schedule = get_sheet_data(SHEET_ID, "–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤!A2:E2")
    schedule_text = "10:00‚Äì20:00"
    if salon_schedule and len(salon_schedule) > 0:
        try:
            days = salon_schedule[0][1]
            start_time = salon_schedule[0][2]
            end_time = salon_schedule[0][3]
            schedule_text = f"{days}: {start_time}‚Äì{end_time}"
        except IndexError:
            pass

    keyboard = [
        [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏—ë–º", callback_data="book")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="modify")],
        [InlineKeyboardButton("üíÖ –£—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã", callback_data="prices")],
        [InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n\n–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º:\n{schedule_text}",
        reply_markup=reply_markup
    )
    return MENU

# --- –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    if query.data == "book":
        return await select_service_type(update, context)
    elif query.data == "modify":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω:")
        user_data[chat_id]["state"] = MODIFY_RESERVATION
        return MODIFY_RESERVATION
    elif query.data == "prices":
        return await show_prices(update, context)
    elif query.data == "contact_admin":
        await query.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        user_data[chat_id]["state"] = MENU
        return MENU

# --- –ü–û–ö–ê–ó –¶–ï–ù ---
async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    chat_id = query.from_user.id
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    prices_text = "üíÖ –ú–ê–ù–ò–ö–Æ–†–ù–´–ï\n"
    in_manicure = True

    for row in services:
        if len(row) < 5:
            continue
        category, subservice, duration, buffer, price = row[0], row[1], int(row[2]), int(row[3]), row[4]
        duration_min = duration + buffer
        formatted_duration = format_duration(duration_min)
        price_str = f"{int(float(price))} ‚ÇΩ" if price.replace('.', '').isdigit() else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

        if category == "–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∏–µ" and in_manicure:
            prices_text += "\n‚úÇÔ∏è –ü–ê–†–ò–ö–ú–ê–•–ï–†–°–ö–ò–ï\n"
            in_manicure = False

        prices_text += f"‚Ä¢ {subservice} ‚Äî {price_str} ({formatted_duration})\n"

    await query.edit_message_text(prices_text, reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="start")]
    ]))

# --- –í–´–ë–û–† –¢–ò–ü–ê –£–°–õ–£–ì–ò ---
async def select_service_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:A")
    service_types = list(set(row[0] for row in services if row))

    keyboard = [[InlineKeyboardButton(st, callback_data=f"service_{st}")] for st in service_types]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=reply_markup)
    user_data[chat_id]["state"] = SELECT_SERVICE_TYPE
    return SELECT_SERVICE_TYPE

# --- –í–´–ë–û–† –ü–û–î–£–°–õ–£–ì–ò ---
async def select_subservice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    service_type = query.data.split("_", 1)[1]
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    subservices = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:B")
    options = [row[1] for row in subservices if row and len(row) > 1 and row[0] == service_type]

    keyboard = [[InlineKeyboardButton(opt, callback_data=f"subservice_{opt}")] for opt in options]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É ({service_type}):", reply_markup=reply_markup)
    user_data[chat_id]["service_type"] = service_type
    user_data[chat_id]["subservice"] = None
    user_data[chat_id]["state"] = SELECT_SUBSERVICE
    return SELECT_SUBSERVICE

# --- –ü–û–ö–ê–ó –¶–ï–ù–´ –ò –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–ò ---
async def show_price_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    subservice = query.data.split("_", 1)[1]
    user_data[chat_id]["subservice"] = subservice

    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    duration, buffer, price = 60, 0, "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    for row in services:
        if len(row) > 1 and row[1] == subservice:
            duration = int(row[2])
            buffer = int(row[3])
            price = row[4]
            break

    total_duration = duration + buffer
    formatted_duration = format_duration(total_duration)
    price_str = f"{int(float(price))} ‚ÇΩ" if price.replace('.', '').isdigit() else "—Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

    text = (
        f"‚úÖ –£—Å–ª—É–≥–∞: {subservice}\n"
        f"üí∞ –¶–µ–Ω–∞: {price_str}\n"
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatted_duration}\n\n"
        "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ?"
    )

    keyboard = [
        [InlineKeyboardButton("üìÖ –°–Ω–∞—á–∞–ª–∞ –¥–∞—Ç–∞", callback_data="priority_date")],
        [InlineKeyboardButton("üë©‚Äçü¶∞ –°–Ω–∞—á–∞–ª–∞ –º–∞—Å—Ç–µ—Ä", callback_data="priority_master")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(text, reply_markup=reply_markup)
    user_data[chat_id]["state"] = SELECT_PRIORITY
    return SELECT_PRIORITY

# --- –î–ê–¢–ê –∏–ª–∏ –ú–ê–°–¢–ï–†? ---
async def select_priority(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    priority = query.data.split("_")[1]
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    user_data[chat_id]["priority"] = priority

    available_dates = find_available_slots(
        service_type=user_data[chat_id]["service_type"],
        subservice=user_data[chat_id]["subservice"],
        priority=priority
    )
    dates = sorted(list(set(d["date"] for d in available_dates)))

    keyboard = [[InlineKeyboardButton(d, callback_data=f"date_{d}")] for d in dates]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=reply_markup)
    user_data[chat_id]["state"] = SELECT_DATE
    return SELECT_DATE

# --- –í–´–ë–û–† –ú–ê–°–¢–ï–†–ê ---
async def select_master(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    date_str = query.data.split("_", 1)[1]
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    user_data[chat_id]["date"] = date_str

    masters = get_sheet_data(SHEET_ID, "–ì—Ä–∞—Ñ–∏–∫ –º–∞—Å—Ç–µ—Ä–æ–≤!A2:E")
    available_masters = []

    for row in masters:
        if len(row) >= 6 and date_str[:2] in row[5]:
            available_masters.append(row[0])

    keyboard = [[InlineKeyboardButton(m, callback_data=f"master_{m}")] for m in available_masters]
    keyboard.append([InlineKeyboardButton("üë§ –õ—é–±–æ–π –º–∞—Å—Ç–µ—Ä", callback_data="master_any")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=reply_markup)
    user_data[chat_id]["state"] = SELECT_MASTER
    return SELECT_MASTER

# --- –í–´–ë–û–† –í–†–ï–ú–ï–ù–ò ---
async def select_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    master_key = query.data.split("_", 1)[1]
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    date_str = user_data[chat_id]["date"]
    service_type = user_data[chat_id]["service_type"]
    subservice = user_data[chat_id]["subservice"]

    slots = find_available_slots(
        service_type=service_type,
        subservice=subservice,
        date=date_str,
        selected_master=master_key if master_key != "any" else None
    )

    if not slots:
        keyboard = [[InlineKeyboardButton("–í –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è", callback_data="waiting_list")]]
        await query.edit_message_text("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç. –•–æ—Ç–∏—Ç–µ –≤—Å—Ç–∞—Ç—å –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è?", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    keyboard = []
    for slot in slots:
        time_str = slot["time"]
        master = slot["master"]
        callback_data = f"slot_{master}_{time_str}"
        keyboard.append([InlineKeyboardButton(f"{time_str} ‚Äî {master}", callback_data=callback_data)])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="book")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=reply_markup)
    user_data[chat_id]["state"] = SELECT_TIME
    return SELECT_TIME

# --- –†–ï–ó–ï–†–í –°–õ–û–¢–ê ---
async def reserve_slot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split("_", 2)
    master = data[1]
    time_str = data[2]
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    date_str = user_data[chat_id]["date"]
    dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m.%Y %H:%M")
    start_dt = TIMEZONE.localize(dt)

    subservice = user_data[chat_id]["subservice"]
    services = get_sheet_data(SHEET_ID, "–£—Å–ª—É–≥–∏!A2:E")
    duration = 60
    for row in services:
        if len(row) > 1 and row[1] == subservice:
            duration = int(row[2]) + int(row[3])
            break
    end_dt = start_dt + timedelta(minutes=duration)

    event_id = create_calendar_event(
        calendar_id=CALENDAR_ID,
        summary="–†–µ–∑–µ—Ä–≤",
        start_time=start_dt.isoformat(),
        end_time=end_dt.isoformat(),
        color_id="5",
        description=f"–†–µ–∑–µ—Ä–≤: {subservice} –∫ {master}"
    )

    user_data[chat_id]["temp_booking"] = {
        "master": master,
        "time": time_str,
        "date": date_str,
        "event_id": event_id,
        "start_dt": start_dt,
        "end_dt": end_dt,
        "duration": duration,
        "subservice": subservice
    }

    context.job_queue.run_once(
        release_reservation,
        RESERVATION_TIMEOUT,
        chat_id=chat_id,
        user_id=chat_id,
        name=f"reservation_timeout_{chat_id}"
    )
    context.job_queue.run_once(
        warn_reservation,
        WARNING_TIMEOUT,
        chat_id=chat_id,
        user_id=chat_id,
        name=f"reservation_warn_{chat_id}"
    )

    await query.edit_message_text("–°–ª–æ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    user_data[chat_id]["state"] = ENTER_NAME
    return ENTER_NAME

async def warn_reservation(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    await context.bot.send_message(chat_id, "‚è≥ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!")

async def release_reservation(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    chat_id = job.chat_id
    temp_booking = user_data.get(chat_id, {}).get("temp_booking")
    if temp_booking and temp_booking.get("event_id"):
        delete_calendar_event(CALENDAR_ID, temp_booking["event_id"])
        await context.bot.send_message(chat_id, "–°–ª–æ—Ç –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
    user_data.pop(chat_id, None)

# --- –í–í–û–î –ò–ú–ï–ù–ò ---
async def enter_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    name = update.message.text.strip()
    user_data[chat_id]["name"] = name
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=ReplyKeyboardRemove())
    user_data[chat_id]["state"] = ENTER_PHONE
    return ENTER_PHONE

# --- –í–í–û–î –¢–ï–õ–ï–§–û–ù–ê ---
async def enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text.strip()

    # === –í–ê–õ–ò–î–ê–¶–ò–Ø –¢–ï–õ–ï–§–û–ù–ê ===
    clean_phone = ''.join(filter(str.isdigit, phone))
    if len(clean_phone) < 10 or len(clean_phone) > 15:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä.")
        return  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É
    phone = clean_phone
    # =========================

    user_data[chat_id]["phone"] = phone

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A2:P")
    for row in records:
        if len(row) > 13 and row[13] == str(chat_id) and row[8] == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ":
            start_time = datetime.strptime(f"{row[6]} {row[7]}", "%d.%m.%Y %H:%M")
            start_time = TIMEZONE.localize(start_time)
            end_time = start_time + timedelta(minutes=60)
            new_start = user_data[chat_id]["temp_booking"]["start_dt"]
            if not (new_start >= end_time or new_start + timedelta(minutes=60) <= start_time):
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {row[6]} –≤ {row[7]} –∫ {row[5]}. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ—ë.")
                return

    # –ú—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
    for row in records:
        if len(row) > 4 and row[1] == user_data[chat_id]["name"] and row[8] == "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" and row[4] == user_data[chat_id]["service_type"]:
            await update.message.reply_text(
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {row[4]} {row[6]} –≤ {row[7]} –∫ {row[5]}.\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –µ—â—ë —Ä–∞–∑?",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É", callback_data="confirm_repeat")],
                    [InlineKeyboardButton("‚ùå –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_reserve")]
                ])
            )
            return

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_reserve")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n"
        f"–£—Å–ª—É–≥–∞: {user_data[chat_id]['subservice']}\n"
        f"–ú–∞—Å—Ç–µ—Ä: {user_data[chat_id]['temp_booking']['master']}\n"
        f"–î–∞—Ç–∞: {user_data[chat_id]['date']}, –í—Ä–µ–º—è: {user_data[chat_id]['temp_booking']['time']}\n"
        f"–ò–º—è: {user_data[chat_id]['name']}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}",
        reply_markup=reply_markup
    )
    user_data[chat_id]["state"] = CONFIRM_RESERVATION
    return ENTER_PHONE

# --- –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ü–ò–°–ò ---
async def confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    temp_booking = user_data[chat_id]["temp_booking"]

    update_calendar_event(
        calendar_id=CALENDAR_ID,
        event_id=temp_booking["event_id"],
        summary="–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        color_id="7",
        description=f"–ö–ª–∏–µ–Ω—Ç: {user_data[chat_id]['name']}, —Ç–µ–ª.: {user_data[chat_id]['phone']}"
    )

    records = get_sheet_data(SHEET_ID, "–ó–∞–ø–∏—Å–∏!A:A")
    record_id = f"–ó–ê–ü-{len(records):03d}"

    append_to_sheet(SHEET_ID, "–ó–∞–ø–∏—Å–∏", [
        record_id,
        user_data[chat_id]["name"],
        user_data[chat_id]["phone"],
        user_data[chat_id]["service_type"],
        user_data[chat_id]["subservice"],
        temp_booking["master"],
        temp_booking["date"],
        temp_booking["time"],
        "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ",
        datetime.now(TIMEZONE).strftime("%d.%m.%Y %H:%M"),
        "",
        "‚ùå", "‚ùå",
        str(chat_id),
        temp_booking["event_id"]
    ])

    link = f"t.me/@salon_bot?start=bind_{record_id}"
    await query.edit_message_text(f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {user_data[chat_id]['subservice']} {temp_booking['date']} –≤ {temp_booking['time']}.\n\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ: {link}")
    await notify_admins(context, f"üì¢ –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {user_data[chat_id]['subservice']} –∫ {temp_booking['master']} {temp_booking['date']} –≤ {temp_booking['time']} ‚Äî {user_data[chat_id]['name']}, {user_data[chat_id]['phone']}")

    user_data.pop(chat_id, None)

# --- –û–¢–ú–ï–ù–ê –†–ï–ó–ï–†–í–ê ---
async def cancel_reservation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.from_user.id

    # === –ó–ê–©–ò–¢–ê –û–¢ –°–ü–ê–ú–ê ===
    now = time.time()
    if now - user_last_msg.get(chat_id, 0) < 1.5:
        return
    user_last_msg[chat_id] = now
    # =======================

    temp_booking = user_data[chat_id].get("temp_booking")
    if temp_booking and temp_booking.get("event_id"):
        delete_calendar_event(CALENDAR_ID, temp_booking["event_id"])
    await query.edit_message_text("–†–µ–∑–µ—Ä–≤ –æ—Ç–º–µ–Ω—ë–Ω. –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥—ë–Ω.")
    user_data.pop(chat_id, None)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.job_queue.run_daily(
        generate_slots_for_10_days,
        time=datetime.strptime("00:00", "%H:%M").time(),
        days=(0, 1, 2, 3, 4, 5, 6)
    )

    application.job_queue.run_repeating(send_reminders, interval=60, first=10)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, enter_name), group=1)
    application.add_handler(MessageHandler(filters.CONTACT, enter_phone), group=1)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()

if __name__ == "__main__":
    main()
